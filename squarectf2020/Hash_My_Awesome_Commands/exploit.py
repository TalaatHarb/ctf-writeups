from pwn import *
import base64

url = 'challenges.2020.squarectf.com'
port = 9020

p = remote(url, port)

print(p.recvuntil(b': '))

known_hash = '9W5iVNkvnM6igjQaWlcN0JJgH+7pComiQZYdkhycKjs='

# Enable debugging
p.sendline('debug|' + known_hash)

print(p.recvline().decode('ascii'))
print(p.recvuntil(b': ').decode('ascii'))

# Attack start
hash_bytes = bytearray(32)

# Assumptions you can here assume any part of the hash that you got from a previous attempt that failed


index = 0

hash = base64.b64encode(hash_bytes).decode('ascii')

attempt = 'flag|' + hash
p.sendline(attempt)
debug = p.recvline().decode('ascii')
time_message = p.recvline().decode('ascii')
max_time = int(time_message.split(' ')[1]) + 410000

success = p.recvline().decode('ascii').strip()
fail = success

print(attempt, success, max_time)

# Loop
counter = 0
while(success == fail and index < 32):
    hash = base64.b64encode(hash_bytes).decode('ascii')
    attempt = 'flag|' + hash
    
    debug = p.recvline().decode('ascii')
    p.recvuntil(b': ').decode('ascii')
    p.sendline(attempt)
    p.recvline().decode('ascii')
    time_message1 = p.recvline().decode('ascii')
    time_message1 = int(time_message1.split(' ')[1])
    success = p.recvline().decode('ascii').strip()
    
    if time_message1 > max_time:
        print(attempt, '              ', time_message1)
        debug = p.recvline().decode('ascii')
        p.recvuntil(b': ').decode('ascii')
        p.sendline(attempt)
        p.recvline().decode('ascii')
        time_message1 = p.recvline().decode('ascii')
        time_message1 = int(time_message1.split(' ')[1])
        success = p.recvline().decode('ascii').strip()
    
        debug = p.recvline().decode('ascii')
        p.recvuntil(b': ').decode('ascii')
        p.sendline(attempt)
        p.recvline().decode('ascii')
        time_message2 = p.recvline().decode('ascii')
        time_message2 = int(time_message2.split(' ')[1])
        success = p.recvline().decode('ascii').strip()
    else:
        time_message2 = time_message1

    time_message = time_message2 if time_message1 > time_message2 else time_message1
    print(attempt, index, success, time_message)
    if time_message > max_time:
        index = index + 1
        max_time = time_message + 400000
        counter = 0
        pause(1)
        continue

    if hash_bytes[index] == 255:
        counter = counter + 1
        max_time = max_time + 1000
        if counter > 5:
            print('Previous byte was wrong, only the first', index - 1, 'are valid')
            break
    hash_bytes[index] = (hash_bytes[index] + 1) % 256

print('flag|' + hash)
